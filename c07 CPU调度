第七章 CPU调度
现在已经了解了进程和进程切换的机制，现在学习调度“策略”




工作量(workload)假设
进程在系统中运行，会产生“工作量”(workload)
这里对工作量做一些不切实际假设，之后会逐渐放松这些假设。
进程也叫任务。假设如下：
1 每个运行相同的时间
2 每个任务都是同一时间到达
3 任务一旦开始，必须执行到结束
4 所有任务只使用CPU(没有IO)
5 每个任务的运行时间已知

调度指标
如何衡量不同的调度策略？
用周转时间(turnaround time)
T(周转) = T(完成) - T(到达)
//由于现在假设所有任务同一时间到达(T(到达)=0),所以现在T(周转) = T(完成)
周转时间是一个性能指标
除了“周转时间”，还有“公平性”。






先进先出  First In, First Out (FIFO)
依次执行任务
假如ABC三个任务同时到达，每个执行10s
则T(平均周转) = (10+20+30)/3=20s
现在放松第1个限制。假如A运行100s，BC都运行10s。A先运行
则T(平均周转) = (100+110+120)/3=110s
可以想到，如果让BC先执行，平均周转时间
T(平均周转) = (10+20+120)/3=50s
这就是“短任务优先”


短任务优先  Shortest Job First (SJF)
如果所有任务同一时间到达，可以证明SJF是最优算法
现在放松第二个限制。假如任务不在同一时间到达
则如果A在0s到达，运行100s。BC在10s同时到达，都运行10s，根据SJF，
T(平均周转) = (100+(110-10)+(120-10))/3=103.33
BC尽管在A到达之后很快到达，但还是要等待A执行完



最短完成时间优先 Shortest Time-to-Completion First (STCF)
为了解决上面的问题，需要放松第三个限制(所有的任务一旦执行，要执行完毕)
当A执行了10s，BC到达，由于BC执行时间短先执行BC。
假如先执行B，则B周转时间10s。接着执行C，C周转时间20s
最后继续执行A，则A的周转时间是120s
T(平均周转) = (120+10+20)/3=50s
如果知道任务的运行时间，并且任务只使用CPU，那么STCF是最优的



新的指标：响应时间
由于现在分时系统广泛使用，许多用户使用一台机器
每个用户都期望得到最短的“响应时间”
T(响应) = T(首次运行) - T(到达)



轮询调度 Round Robin（RR）
让每个任务运行一小段时间，可以提高响应时间
假设ABC三个任务同时到达，每个运行5s
如果使用SJF或STCF，则
T(响应) = (0 + 5 + 10)/3=5s
如果使用RR,时间片为1s，也就是每隔1s轮询任务，则
T(响应) = (0 + 1 + 2)/3=1s
可以看到RR时间片的大小直接影响响应时间 
那问什么不把时间片设置的非常小呢？
因为在上下文切换过程中，除了OS和硬件要保存寄存器的值，还有CPU缓存、TLB等等需要重新刷新
如果时间片很小，那么很大的开销都花在上下文切换上了
RR对响应时间最友好，对周转时间最不友好


有IO的情况
放松第四个限制(任务只使用CPU，没有IO)
当任务使用IO时，不再占用CPU,这时候应该把CPU分配给其他任务
这里的关键是，把一个有IO的任务，划分成子任务，每个子任务只使用CPU
子任务就相当于一个单个的任务被调度



最后一个假设(每个任务的运行时间已知)
可以看到，SJF/STCF 调度的前提是要有任务的运行时间，才能知道哪个任务运行时间最短
但实际上，OS基本上对任务运行时间一无所知
那如何在不知道任务运行时间的情况下使用SJF/STCF？
又如何结合RR，从而也能得到较短的响应时间？
下一章看到，可以通过任务的过去来预测未来，这就是
多级反馈队列（multi-level feedback queue） 调度的设计。
